// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BotResponse.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BotResponse.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BotResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BotResponse_reflection_ = NULL;
struct BotResponseOneofInstance {
  const ::BusResponse* bus_response_;
  const ::IMUInitResult* imu_init_result_;
  const ::IMUData* imu_data_;
  const ::BatteryVoltage* battery_voltage_;
  const ::BumperStatus* bumper_status_;
}* BotResponse_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* BusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* IMUInitResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IMUInitResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* IMUDataElement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IMUDataElement_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quaternion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quaternion_reflection_ = NULL;
const ::google::protobuf::Descriptor* IMUData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IMUData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatteryVoltage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatteryVoltage_reflection_ = NULL;
const ::google::protobuf::Descriptor* BumperStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BumperStatus_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BotResponse_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_BotResponse_2eproto() {
  protobuf_AddDesc_BotResponse_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BotResponse.proto");
  GOOGLE_CHECK(file != NULL);
  BotResponse_descriptor_ = file->message_type(0);
  static const int BotResponse_offsets_[6] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(BotResponse_default_oneof_instance_, bus_response_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(BotResponse_default_oneof_instance_, imu_init_result_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(BotResponse_default_oneof_instance_, imu_data_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(BotResponse_default_oneof_instance_, battery_voltage_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(BotResponse_default_oneof_instance_, bumper_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotResponse, body_),
  };
  BotResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BotResponse_descriptor_,
      BotResponse::default_instance_,
      BotResponse_offsets_,
      -1,
      -1,
      -1,
      BotResponse_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotResponse, _oneof_case_[0]),
      sizeof(BotResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotResponse, _is_default_instance_));
  BusResponse_descriptor_ = file->message_type(1);
  static const int BusResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusResponse, bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusResponse, data_len_),
  };
  BusResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BusResponse_descriptor_,
      BusResponse::default_instance_,
      BusResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(BusResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusResponse, _is_default_instance_));
  IMUInitResult_descriptor_ = file->message_type(2);
  static const int IMUInitResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUInitResult, init_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUInitResult, test_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUInitResult, gyroscope_sensitivity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUInitResult, accelerometer_sensitivity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUInitResult, quaternion_sensitivity_),
  };
  IMUInitResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IMUInitResult_descriptor_,
      IMUInitResult::default_instance_,
      IMUInitResult_offsets_,
      -1,
      -1,
      -1,
      sizeof(IMUInitResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUInitResult, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUInitResult, _is_default_instance_));
  IMUDataElement_descriptor_ = file->message_type(3);
  static const int IMUDataElement_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUDataElement, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUDataElement, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUDataElement, z_),
  };
  IMUDataElement_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IMUDataElement_descriptor_,
      IMUDataElement::default_instance_,
      IMUDataElement_offsets_,
      -1,
      -1,
      -1,
      sizeof(IMUDataElement),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUDataElement, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUDataElement, _is_default_instance_));
  Quaternion_descriptor_ = file->message_type(4);
  static const int Quaternion_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, z_),
  };
  Quaternion_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Quaternion_descriptor_,
      Quaternion::default_instance_,
      Quaternion_offsets_,
      -1,
      -1,
      -1,
      sizeof(Quaternion),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, _is_default_instance_));
  IMUData_descriptor_ = file->message_type(5);
  static const int IMUData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUData, angular_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUData, linear_acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUData, orientation_),
  };
  IMUData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IMUData_descriptor_,
      IMUData::default_instance_,
      IMUData_offsets_,
      -1,
      -1,
      -1,
      sizeof(IMUData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUData, _is_default_instance_));
  BatteryVoltage_descriptor_ = file->message_type(6);
  static const int BatteryVoltage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryVoltage, voltage_),
  };
  BatteryVoltage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BatteryVoltage_descriptor_,
      BatteryVoltage::default_instance_,
      BatteryVoltage_offsets_,
      -1,
      -1,
      -1,
      sizeof(BatteryVoltage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryVoltage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryVoltage, _is_default_instance_));
  BumperStatus_descriptor_ = file->message_type(7);
  static const int BumperStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BumperStatus, status_),
  };
  BumperStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BumperStatus_descriptor_,
      BumperStatus::default_instance_,
      BumperStatus_offsets_,
      -1,
      -1,
      -1,
      sizeof(BumperStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BumperStatus, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BumperStatus, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BotResponse_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BotResponse_descriptor_, &BotResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BusResponse_descriptor_, &BusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IMUInitResult_descriptor_, &IMUInitResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IMUDataElement_descriptor_, &IMUDataElement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Quaternion_descriptor_, &Quaternion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IMUData_descriptor_, &IMUData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BatteryVoltage_descriptor_, &BatteryVoltage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BumperStatus_descriptor_, &BumperStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BotResponse_2eproto() {
  delete BotResponse::default_instance_;
  delete BotResponse_default_oneof_instance_;
  delete BotResponse_reflection_;
  delete BusResponse::default_instance_;
  delete BusResponse_reflection_;
  delete IMUInitResult::default_instance_;
  delete IMUInitResult_reflection_;
  delete IMUDataElement::default_instance_;
  delete IMUDataElement_reflection_;
  delete Quaternion::default_instance_;
  delete Quaternion_reflection_;
  delete IMUData::default_instance_;
  delete IMUData_reflection_;
  delete BatteryVoltage::default_instance_;
  delete BatteryVoltage_reflection_;
  delete BumperStatus::default_instance_;
  delete BumperStatus_reflection_;
}

void protobuf_AddDesc_BotResponse_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_BotResponse_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021BotResponse.proto\"\330\001\n\013BotResponse\022$\n\014b"
    "us_response\030\001 \001(\0132\014.BusResponseH\000\022)\n\017imu"
    "_init_result\030\002 \001(\0132\016.IMUInitResultH\000\022\034\n\010"
    "imu_data\030\003 \001(\0132\010.IMUDataH\000\022*\n\017battery_vo"
    "ltage\030\004 \001(\0132\017.BatteryVoltageH\000\022&\n\rbumper"
    "_status\030\005 \001(\0132\r.BumperStatusH\000B\006\n\004body\"/"
    "\n\013BusResponse\022\016\n\006bus_id\030\001 \001(\r\022\020\n\010data_le"
    "n\030\002 \001(\r\"\233\001\n\rIMUInitResult\022\023\n\013init_result"
    "\030\001 \001(\005\022\023\n\013test_result\030\002 \001(\005\022\035\n\025gyroscope"
    "_sensitivity\030\003 \001(\002\022!\n\031accelerometer_sens"
    "itivity\030\004 \001(\002\022\036\n\026quaternion_sensitivity\030"
    "\005 \001(\002\"1\n\016IMUDataElement\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030"
    "\002 \001(\005\022\t\n\001z\030\003 \001(\005\"8\n\nQuaternion\022\t\n\001w\030\001 \001("
    "\005\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\022\t\n\001z\030\004 \001(\005\"\204\001\n\007I"
    "MUData\022)\n\020angular_velocity\030\001 \001(\0132\017.IMUDa"
    "taElement\022,\n\023linear_acceleration\030\002 \001(\0132\017"
    ".IMUDataElement\022 \n\013orientation\030\003 \001(\0132\013.Q"
    "uaternion\"!\n\016BatteryVoltage\022\017\n\007voltage\030\001"
    " \001(\002\"\036\n\014BumperStatus\022\016\n\006status\030\001 \001(\rb\006pr"
    "oto3", 764);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BotResponse.proto", &protobuf_RegisterTypes);
  BotResponse::default_instance_ = new BotResponse();
  BotResponse_default_oneof_instance_ = new BotResponseOneofInstance();
  BusResponse::default_instance_ = new BusResponse();
  IMUInitResult::default_instance_ = new IMUInitResult();
  IMUDataElement::default_instance_ = new IMUDataElement();
  Quaternion::default_instance_ = new Quaternion();
  IMUData::default_instance_ = new IMUData();
  BatteryVoltage::default_instance_ = new BatteryVoltage();
  BumperStatus::default_instance_ = new BumperStatus();
  BotResponse::default_instance_->InitAsDefaultInstance();
  BusResponse::default_instance_->InitAsDefaultInstance();
  IMUInitResult::default_instance_->InitAsDefaultInstance();
  IMUDataElement::default_instance_->InitAsDefaultInstance();
  Quaternion::default_instance_->InitAsDefaultInstance();
  IMUData::default_instance_->InitAsDefaultInstance();
  BatteryVoltage::default_instance_->InitAsDefaultInstance();
  BumperStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BotResponse_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BotResponse_2eproto {
  StaticDescriptorInitializer_BotResponse_2eproto() {
    protobuf_AddDesc_BotResponse_2eproto();
  }
} static_descriptor_initializer_BotResponse_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BotResponse::kBusResponseFieldNumber;
const int BotResponse::kImuInitResultFieldNumber;
const int BotResponse::kImuDataFieldNumber;
const int BotResponse::kBatteryVoltageFieldNumber;
const int BotResponse::kBumperStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BotResponse::BotResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BotResponse)
}

void BotResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  BotResponse_default_oneof_instance_->bus_response_ = const_cast< ::BusResponse*>(&::BusResponse::default_instance());
  BotResponse_default_oneof_instance_->imu_init_result_ = const_cast< ::IMUInitResult*>(&::IMUInitResult::default_instance());
  BotResponse_default_oneof_instance_->imu_data_ = const_cast< ::IMUData*>(&::IMUData::default_instance());
  BotResponse_default_oneof_instance_->battery_voltage_ = const_cast< ::BatteryVoltage*>(&::BatteryVoltage::default_instance());
  BotResponse_default_oneof_instance_->bumper_status_ = const_cast< ::BumperStatus*>(&::BumperStatus::default_instance());
}

BotResponse::BotResponse(const BotResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BotResponse)
}

void BotResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_body();
}

BotResponse::~BotResponse() {
  // @@protoc_insertion_point(destructor:BotResponse)
  SharedDtor();
}

void BotResponse::SharedDtor() {
  if (has_body()) {
    clear_body();
  }
  if (this != default_instance_) {
  }
}

void BotResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BotResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BotResponse_descriptor_;
}

const BotResponse& BotResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BotResponse_2eproto();
  return *default_instance_;
}

BotResponse* BotResponse::default_instance_ = NULL;

BotResponse* BotResponse::New(::google::protobuf::Arena* arena) const {
  BotResponse* n = new BotResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BotResponse::clear_body() {
// @@protoc_insertion_point(one_of_clear_start:BotResponse)
  switch(body_case()) {
    case kBusResponse: {
      delete body_.bus_response_;
      break;
    }
    case kImuInitResult: {
      delete body_.imu_init_result_;
      break;
    }
    case kImuData: {
      delete body_.imu_data_;
      break;
    }
    case kBatteryVoltage: {
      delete body_.battery_voltage_;
      break;
    }
    case kBumperStatus: {
      delete body_.bumper_status_;
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BODY_NOT_SET;
}


void BotResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:BotResponse)
  clear_body();
}

bool BotResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BotResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BusResponse bus_response = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bus_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_imu_init_result;
        break;
      }

      // optional .IMUInitResult imu_init_result = 2;
      case 2: {
        if (tag == 18) {
         parse_imu_init_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imu_init_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_imu_data;
        break;
      }

      // optional .IMUData imu_data = 3;
      case 3: {
        if (tag == 26) {
         parse_imu_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imu_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_battery_voltage;
        break;
      }

      // optional .BatteryVoltage battery_voltage = 4;
      case 4: {
        if (tag == 34) {
         parse_battery_voltage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battery_voltage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_bumper_status;
        break;
      }

      // optional .BumperStatus bumper_status = 5;
      case 5: {
        if (tag == 42) {
         parse_bumper_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bumper_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BotResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BotResponse)
  return false;
#undef DO_
}

void BotResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BotResponse)
  // optional .BusResponse bus_response = 1;
  if (has_bus_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *body_.bus_response_, output);
  }

  // optional .IMUInitResult imu_init_result = 2;
  if (has_imu_init_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *body_.imu_init_result_, output);
  }

  // optional .IMUData imu_data = 3;
  if (has_imu_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *body_.imu_data_, output);
  }

  // optional .BatteryVoltage battery_voltage = 4;
  if (has_battery_voltage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *body_.battery_voltage_, output);
  }

  // optional .BumperStatus bumper_status = 5;
  if (has_bumper_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *body_.bumper_status_, output);
  }

  // @@protoc_insertion_point(serialize_end:BotResponse)
}

::google::protobuf::uint8* BotResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BotResponse)
  // optional .BusResponse bus_response = 1;
  if (has_bus_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *body_.bus_response_, false, target);
  }

  // optional .IMUInitResult imu_init_result = 2;
  if (has_imu_init_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *body_.imu_init_result_, false, target);
  }

  // optional .IMUData imu_data = 3;
  if (has_imu_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *body_.imu_data_, false, target);
  }

  // optional .BatteryVoltage battery_voltage = 4;
  if (has_battery_voltage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *body_.battery_voltage_, false, target);
  }

  // optional .BumperStatus bumper_status = 5;
  if (has_bumper_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *body_.bumper_status_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BotResponse)
  return target;
}

int BotResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BotResponse)
  int total_size = 0;

  switch (body_case()) {
    // optional .BusResponse bus_response = 1;
    case kBusResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.bus_response_);
      break;
    }
    // optional .IMUInitResult imu_init_result = 2;
    case kImuInitResult: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.imu_init_result_);
      break;
    }
    // optional .IMUData imu_data = 3;
    case kImuData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.imu_data_);
      break;
    }
    // optional .BatteryVoltage battery_voltage = 4;
    case kBatteryVoltage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.battery_voltage_);
      break;
    }
    // optional .BumperStatus bumper_status = 5;
    case kBumperStatus: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.bumper_status_);
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BotResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BotResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BotResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BotResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BotResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BotResponse)
    MergeFrom(*source);
  }
}

void BotResponse::MergeFrom(const BotResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BotResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.body_case()) {
    case kBusResponse: {
      mutable_bus_response()->::BusResponse::MergeFrom(from.bus_response());
      break;
    }
    case kImuInitResult: {
      mutable_imu_init_result()->::IMUInitResult::MergeFrom(from.imu_init_result());
      break;
    }
    case kImuData: {
      mutable_imu_data()->::IMUData::MergeFrom(from.imu_data());
      break;
    }
    case kBatteryVoltage: {
      mutable_battery_voltage()->::BatteryVoltage::MergeFrom(from.battery_voltage());
      break;
    }
    case kBumperStatus: {
      mutable_bumper_status()->::BumperStatus::MergeFrom(from.bumper_status());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
}

void BotResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BotResponse::CopyFrom(const BotResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BotResponse::IsInitialized() const {

  return true;
}

void BotResponse::Swap(BotResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BotResponse::InternalSwap(BotResponse* other) {
  std::swap(body_, other->body_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BotResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BotResponse_descriptor_;
  metadata.reflection = BotResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BotResponse

// optional .BusResponse bus_response = 1;
bool BotResponse::has_bus_response() const {
  return body_case() == kBusResponse;
}
void BotResponse::set_has_bus_response() {
  _oneof_case_[0] = kBusResponse;
}
void BotResponse::clear_bus_response() {
  if (has_bus_response()) {
    delete body_.bus_response_;
    clear_has_body();
  }
}
 const ::BusResponse& BotResponse::bus_response() const {
  // @@protoc_insertion_point(field_get:BotResponse.bus_response)
  return has_bus_response()
      ? *body_.bus_response_
      : ::BusResponse::default_instance();
}
::BusResponse* BotResponse::mutable_bus_response() {
  if (!has_bus_response()) {
    clear_body();
    set_has_bus_response();
    body_.bus_response_ = new ::BusResponse;
  }
  // @@protoc_insertion_point(field_mutable:BotResponse.bus_response)
  return body_.bus_response_;
}
::BusResponse* BotResponse::release_bus_response() {
  // @@protoc_insertion_point(field_release:BotResponse.bus_response)
  if (has_bus_response()) {
    clear_has_body();
    ::BusResponse* temp = body_.bus_response_;
    body_.bus_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void BotResponse::set_allocated_bus_response(::BusResponse* bus_response) {
  clear_body();
  if (bus_response) {
    set_has_bus_response();
    body_.bus_response_ = bus_response;
  }
  // @@protoc_insertion_point(field_set_allocated:BotResponse.bus_response)
}

// optional .IMUInitResult imu_init_result = 2;
bool BotResponse::has_imu_init_result() const {
  return body_case() == kImuInitResult;
}
void BotResponse::set_has_imu_init_result() {
  _oneof_case_[0] = kImuInitResult;
}
void BotResponse::clear_imu_init_result() {
  if (has_imu_init_result()) {
    delete body_.imu_init_result_;
    clear_has_body();
  }
}
 const ::IMUInitResult& BotResponse::imu_init_result() const {
  // @@protoc_insertion_point(field_get:BotResponse.imu_init_result)
  return has_imu_init_result()
      ? *body_.imu_init_result_
      : ::IMUInitResult::default_instance();
}
::IMUInitResult* BotResponse::mutable_imu_init_result() {
  if (!has_imu_init_result()) {
    clear_body();
    set_has_imu_init_result();
    body_.imu_init_result_ = new ::IMUInitResult;
  }
  // @@protoc_insertion_point(field_mutable:BotResponse.imu_init_result)
  return body_.imu_init_result_;
}
::IMUInitResult* BotResponse::release_imu_init_result() {
  // @@protoc_insertion_point(field_release:BotResponse.imu_init_result)
  if (has_imu_init_result()) {
    clear_has_body();
    ::IMUInitResult* temp = body_.imu_init_result_;
    body_.imu_init_result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void BotResponse::set_allocated_imu_init_result(::IMUInitResult* imu_init_result) {
  clear_body();
  if (imu_init_result) {
    set_has_imu_init_result();
    body_.imu_init_result_ = imu_init_result;
  }
  // @@protoc_insertion_point(field_set_allocated:BotResponse.imu_init_result)
}

// optional .IMUData imu_data = 3;
bool BotResponse::has_imu_data() const {
  return body_case() == kImuData;
}
void BotResponse::set_has_imu_data() {
  _oneof_case_[0] = kImuData;
}
void BotResponse::clear_imu_data() {
  if (has_imu_data()) {
    delete body_.imu_data_;
    clear_has_body();
  }
}
 const ::IMUData& BotResponse::imu_data() const {
  // @@protoc_insertion_point(field_get:BotResponse.imu_data)
  return has_imu_data()
      ? *body_.imu_data_
      : ::IMUData::default_instance();
}
::IMUData* BotResponse::mutable_imu_data() {
  if (!has_imu_data()) {
    clear_body();
    set_has_imu_data();
    body_.imu_data_ = new ::IMUData;
  }
  // @@protoc_insertion_point(field_mutable:BotResponse.imu_data)
  return body_.imu_data_;
}
::IMUData* BotResponse::release_imu_data() {
  // @@protoc_insertion_point(field_release:BotResponse.imu_data)
  if (has_imu_data()) {
    clear_has_body();
    ::IMUData* temp = body_.imu_data_;
    body_.imu_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void BotResponse::set_allocated_imu_data(::IMUData* imu_data) {
  clear_body();
  if (imu_data) {
    set_has_imu_data();
    body_.imu_data_ = imu_data;
  }
  // @@protoc_insertion_point(field_set_allocated:BotResponse.imu_data)
}

// optional .BatteryVoltage battery_voltage = 4;
bool BotResponse::has_battery_voltage() const {
  return body_case() == kBatteryVoltage;
}
void BotResponse::set_has_battery_voltage() {
  _oneof_case_[0] = kBatteryVoltage;
}
void BotResponse::clear_battery_voltage() {
  if (has_battery_voltage()) {
    delete body_.battery_voltage_;
    clear_has_body();
  }
}
 const ::BatteryVoltage& BotResponse::battery_voltage() const {
  // @@protoc_insertion_point(field_get:BotResponse.battery_voltage)
  return has_battery_voltage()
      ? *body_.battery_voltage_
      : ::BatteryVoltage::default_instance();
}
::BatteryVoltage* BotResponse::mutable_battery_voltage() {
  if (!has_battery_voltage()) {
    clear_body();
    set_has_battery_voltage();
    body_.battery_voltage_ = new ::BatteryVoltage;
  }
  // @@protoc_insertion_point(field_mutable:BotResponse.battery_voltage)
  return body_.battery_voltage_;
}
::BatteryVoltage* BotResponse::release_battery_voltage() {
  // @@protoc_insertion_point(field_release:BotResponse.battery_voltage)
  if (has_battery_voltage()) {
    clear_has_body();
    ::BatteryVoltage* temp = body_.battery_voltage_;
    body_.battery_voltage_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void BotResponse::set_allocated_battery_voltage(::BatteryVoltage* battery_voltage) {
  clear_body();
  if (battery_voltage) {
    set_has_battery_voltage();
    body_.battery_voltage_ = battery_voltage;
  }
  // @@protoc_insertion_point(field_set_allocated:BotResponse.battery_voltage)
}

// optional .BumperStatus bumper_status = 5;
bool BotResponse::has_bumper_status() const {
  return body_case() == kBumperStatus;
}
void BotResponse::set_has_bumper_status() {
  _oneof_case_[0] = kBumperStatus;
}
void BotResponse::clear_bumper_status() {
  if (has_bumper_status()) {
    delete body_.bumper_status_;
    clear_has_body();
  }
}
 const ::BumperStatus& BotResponse::bumper_status() const {
  // @@protoc_insertion_point(field_get:BotResponse.bumper_status)
  return has_bumper_status()
      ? *body_.bumper_status_
      : ::BumperStatus::default_instance();
}
::BumperStatus* BotResponse::mutable_bumper_status() {
  if (!has_bumper_status()) {
    clear_body();
    set_has_bumper_status();
    body_.bumper_status_ = new ::BumperStatus;
  }
  // @@protoc_insertion_point(field_mutable:BotResponse.bumper_status)
  return body_.bumper_status_;
}
::BumperStatus* BotResponse::release_bumper_status() {
  // @@protoc_insertion_point(field_release:BotResponse.bumper_status)
  if (has_bumper_status()) {
    clear_has_body();
    ::BumperStatus* temp = body_.bumper_status_;
    body_.bumper_status_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void BotResponse::set_allocated_bumper_status(::BumperStatus* bumper_status) {
  clear_body();
  if (bumper_status) {
    set_has_bumper_status();
    body_.bumper_status_ = bumper_status;
  }
  // @@protoc_insertion_point(field_set_allocated:BotResponse.bumper_status)
}

bool BotResponse::has_body() const {
  return body_case() != BODY_NOT_SET;
}
void BotResponse::clear_has_body() {
  _oneof_case_[0] = BODY_NOT_SET;
}
BotResponse::BodyCase BotResponse::body_case() const {
  return BotResponse::BodyCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BusResponse::kBusIdFieldNumber;
const int BusResponse::kDataLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BusResponse::BusResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BusResponse)
}

void BusResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BusResponse::BusResponse(const BusResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BusResponse)
}

void BusResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  bus_id_ = 0u;
  data_len_ = 0u;
}

BusResponse::~BusResponse() {
  // @@protoc_insertion_point(destructor:BusResponse)
  SharedDtor();
}

void BusResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BusResponse_descriptor_;
}

const BusResponse& BusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BotResponse_2eproto();
  return *default_instance_;
}

BusResponse* BusResponse::default_instance_ = NULL;

BusResponse* BusResponse::New(::google::protobuf::Arena* arena) const {
  BusResponse* n = new BusResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:BusResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BusResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BusResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(bus_id_, data_len_);

#undef ZR_HELPER_
#undef ZR_

}

bool BusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BusResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bus_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bus_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_data_len;
        break;
      }

      // optional uint32 data_len = 2;
      case 2: {
        if (tag == 16) {
         parse_data_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_len_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BusResponse)
  return false;
#undef DO_
}

void BusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BusResponse)
  // optional uint32 bus_id = 1;
  if (this->bus_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bus_id(), output);
  }

  // optional uint32 data_len = 2;
  if (this->data_len() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->data_len(), output);
  }

  // @@protoc_insertion_point(serialize_end:BusResponse)
}

::google::protobuf::uint8* BusResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BusResponse)
  // optional uint32 bus_id = 1;
  if (this->bus_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bus_id(), target);
  }

  // optional uint32 data_len = 2;
  if (this->data_len() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->data_len(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BusResponse)
  return target;
}

int BusResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BusResponse)
  int total_size = 0;

  // optional uint32 bus_id = 1;
  if (this->bus_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bus_id());
  }

  // optional uint32 data_len = 2;
  if (this->data_len() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->data_len());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BusResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BusResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BusResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BusResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BusResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BusResponse)
    MergeFrom(*source);
  }
}

void BusResponse::MergeFrom(const BusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BusResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.bus_id() != 0) {
    set_bus_id(from.bus_id());
  }
  if (from.data_len() != 0) {
    set_data_len(from.data_len());
  }
}

void BusResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BusResponse::CopyFrom(const BusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusResponse::IsInitialized() const {

  return true;
}

void BusResponse::Swap(BusResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BusResponse::InternalSwap(BusResponse* other) {
  std::swap(bus_id_, other->bus_id_);
  std::swap(data_len_, other->data_len_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BusResponse_descriptor_;
  metadata.reflection = BusResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BusResponse

// optional uint32 bus_id = 1;
void BusResponse::clear_bus_id() {
  bus_id_ = 0u;
}
 ::google::protobuf::uint32 BusResponse::bus_id() const {
  // @@protoc_insertion_point(field_get:BusResponse.bus_id)
  return bus_id_;
}
 void BusResponse::set_bus_id(::google::protobuf::uint32 value) {
  
  bus_id_ = value;
  // @@protoc_insertion_point(field_set:BusResponse.bus_id)
}

// optional uint32 data_len = 2;
void BusResponse::clear_data_len() {
  data_len_ = 0u;
}
 ::google::protobuf::uint32 BusResponse::data_len() const {
  // @@protoc_insertion_point(field_get:BusResponse.data_len)
  return data_len_;
}
 void BusResponse::set_data_len(::google::protobuf::uint32 value) {
  
  data_len_ = value;
  // @@protoc_insertion_point(field_set:BusResponse.data_len)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMUInitResult::kInitResultFieldNumber;
const int IMUInitResult::kTestResultFieldNumber;
const int IMUInitResult::kGyroscopeSensitivityFieldNumber;
const int IMUInitResult::kAccelerometerSensitivityFieldNumber;
const int IMUInitResult::kQuaternionSensitivityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMUInitResult::IMUInitResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IMUInitResult)
}

void IMUInitResult::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

IMUInitResult::IMUInitResult(const IMUInitResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IMUInitResult)
}

void IMUInitResult::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  init_result_ = 0;
  test_result_ = 0;
  gyroscope_sensitivity_ = 0;
  accelerometer_sensitivity_ = 0;
  quaternion_sensitivity_ = 0;
}

IMUInitResult::~IMUInitResult() {
  // @@protoc_insertion_point(destructor:IMUInitResult)
  SharedDtor();
}

void IMUInitResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IMUInitResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMUInitResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMUInitResult_descriptor_;
}

const IMUInitResult& IMUInitResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BotResponse_2eproto();
  return *default_instance_;
}

IMUInitResult* IMUInitResult::default_instance_ = NULL;

IMUInitResult* IMUInitResult::New(::google::protobuf::Arena* arena) const {
  IMUInitResult* n = new IMUInitResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMUInitResult::Clear() {
// @@protoc_insertion_point(message_clear_start:IMUInitResult)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IMUInitResult, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IMUInitResult*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(init_result_, quaternion_sensitivity_);

#undef ZR_HELPER_
#undef ZR_

}

bool IMUInitResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IMUInitResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 init_result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_test_result;
        break;
      }

      // optional int32 test_result = 2;
      case 2: {
        if (tag == 16) {
         parse_test_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &test_result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_gyroscope_sensitivity;
        break;
      }

      // optional float gyroscope_sensitivity = 3;
      case 3: {
        if (tag == 29) {
         parse_gyroscope_sensitivity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gyroscope_sensitivity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_accelerometer_sensitivity;
        break;
      }

      // optional float accelerometer_sensitivity = 4;
      case 4: {
        if (tag == 37) {
         parse_accelerometer_sensitivity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accelerometer_sensitivity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_quaternion_sensitivity;
        break;
      }

      // optional float quaternion_sensitivity = 5;
      case 5: {
        if (tag == 45) {
         parse_quaternion_sensitivity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &quaternion_sensitivity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IMUInitResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IMUInitResult)
  return false;
#undef DO_
}

void IMUInitResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IMUInitResult)
  // optional int32 init_result = 1;
  if (this->init_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->init_result(), output);
  }

  // optional int32 test_result = 2;
  if (this->test_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->test_result(), output);
  }

  // optional float gyroscope_sensitivity = 3;
  if (this->gyroscope_sensitivity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->gyroscope_sensitivity(), output);
  }

  // optional float accelerometer_sensitivity = 4;
  if (this->accelerometer_sensitivity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->accelerometer_sensitivity(), output);
  }

  // optional float quaternion_sensitivity = 5;
  if (this->quaternion_sensitivity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->quaternion_sensitivity(), output);
  }

  // @@protoc_insertion_point(serialize_end:IMUInitResult)
}

::google::protobuf::uint8* IMUInitResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IMUInitResult)
  // optional int32 init_result = 1;
  if (this->init_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->init_result(), target);
  }

  // optional int32 test_result = 2;
  if (this->test_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->test_result(), target);
  }

  // optional float gyroscope_sensitivity = 3;
  if (this->gyroscope_sensitivity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->gyroscope_sensitivity(), target);
  }

  // optional float accelerometer_sensitivity = 4;
  if (this->accelerometer_sensitivity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->accelerometer_sensitivity(), target);
  }

  // optional float quaternion_sensitivity = 5;
  if (this->quaternion_sensitivity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->quaternion_sensitivity(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IMUInitResult)
  return target;
}

int IMUInitResult::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IMUInitResult)
  int total_size = 0;

  // optional int32 init_result = 1;
  if (this->init_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->init_result());
  }

  // optional int32 test_result = 2;
  if (this->test_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->test_result());
  }

  // optional float gyroscope_sensitivity = 3;
  if (this->gyroscope_sensitivity() != 0) {
    total_size += 1 + 4;
  }

  // optional float accelerometer_sensitivity = 4;
  if (this->accelerometer_sensitivity() != 0) {
    total_size += 1 + 4;
  }

  // optional float quaternion_sensitivity = 5;
  if (this->quaternion_sensitivity() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUInitResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IMUInitResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IMUInitResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IMUInitResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IMUInitResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IMUInitResult)
    MergeFrom(*source);
  }
}

void IMUInitResult::MergeFrom(const IMUInitResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IMUInitResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.init_result() != 0) {
    set_init_result(from.init_result());
  }
  if (from.test_result() != 0) {
    set_test_result(from.test_result());
  }
  if (from.gyroscope_sensitivity() != 0) {
    set_gyroscope_sensitivity(from.gyroscope_sensitivity());
  }
  if (from.accelerometer_sensitivity() != 0) {
    set_accelerometer_sensitivity(from.accelerometer_sensitivity());
  }
  if (from.quaternion_sensitivity() != 0) {
    set_quaternion_sensitivity(from.quaternion_sensitivity());
  }
}

void IMUInitResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IMUInitResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMUInitResult::CopyFrom(const IMUInitResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IMUInitResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUInitResult::IsInitialized() const {

  return true;
}

void IMUInitResult::Swap(IMUInitResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMUInitResult::InternalSwap(IMUInitResult* other) {
  std::swap(init_result_, other->init_result_);
  std::swap(test_result_, other->test_result_);
  std::swap(gyroscope_sensitivity_, other->gyroscope_sensitivity_);
  std::swap(accelerometer_sensitivity_, other->accelerometer_sensitivity_);
  std::swap(quaternion_sensitivity_, other->quaternion_sensitivity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMUInitResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IMUInitResult_descriptor_;
  metadata.reflection = IMUInitResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMUInitResult

// optional int32 init_result = 1;
void IMUInitResult::clear_init_result() {
  init_result_ = 0;
}
 ::google::protobuf::int32 IMUInitResult::init_result() const {
  // @@protoc_insertion_point(field_get:IMUInitResult.init_result)
  return init_result_;
}
 void IMUInitResult::set_init_result(::google::protobuf::int32 value) {
  
  init_result_ = value;
  // @@protoc_insertion_point(field_set:IMUInitResult.init_result)
}

// optional int32 test_result = 2;
void IMUInitResult::clear_test_result() {
  test_result_ = 0;
}
 ::google::protobuf::int32 IMUInitResult::test_result() const {
  // @@protoc_insertion_point(field_get:IMUInitResult.test_result)
  return test_result_;
}
 void IMUInitResult::set_test_result(::google::protobuf::int32 value) {
  
  test_result_ = value;
  // @@protoc_insertion_point(field_set:IMUInitResult.test_result)
}

// optional float gyroscope_sensitivity = 3;
void IMUInitResult::clear_gyroscope_sensitivity() {
  gyroscope_sensitivity_ = 0;
}
 float IMUInitResult::gyroscope_sensitivity() const {
  // @@protoc_insertion_point(field_get:IMUInitResult.gyroscope_sensitivity)
  return gyroscope_sensitivity_;
}
 void IMUInitResult::set_gyroscope_sensitivity(float value) {
  
  gyroscope_sensitivity_ = value;
  // @@protoc_insertion_point(field_set:IMUInitResult.gyroscope_sensitivity)
}

// optional float accelerometer_sensitivity = 4;
void IMUInitResult::clear_accelerometer_sensitivity() {
  accelerometer_sensitivity_ = 0;
}
 float IMUInitResult::accelerometer_sensitivity() const {
  // @@protoc_insertion_point(field_get:IMUInitResult.accelerometer_sensitivity)
  return accelerometer_sensitivity_;
}
 void IMUInitResult::set_accelerometer_sensitivity(float value) {
  
  accelerometer_sensitivity_ = value;
  // @@protoc_insertion_point(field_set:IMUInitResult.accelerometer_sensitivity)
}

// optional float quaternion_sensitivity = 5;
void IMUInitResult::clear_quaternion_sensitivity() {
  quaternion_sensitivity_ = 0;
}
 float IMUInitResult::quaternion_sensitivity() const {
  // @@protoc_insertion_point(field_get:IMUInitResult.quaternion_sensitivity)
  return quaternion_sensitivity_;
}
 void IMUInitResult::set_quaternion_sensitivity(float value) {
  
  quaternion_sensitivity_ = value;
  // @@protoc_insertion_point(field_set:IMUInitResult.quaternion_sensitivity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMUDataElement::kXFieldNumber;
const int IMUDataElement::kYFieldNumber;
const int IMUDataElement::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMUDataElement::IMUDataElement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IMUDataElement)
}

void IMUDataElement::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

IMUDataElement::IMUDataElement(const IMUDataElement& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IMUDataElement)
}

void IMUDataElement::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
}

IMUDataElement::~IMUDataElement() {
  // @@protoc_insertion_point(destructor:IMUDataElement)
  SharedDtor();
}

void IMUDataElement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IMUDataElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMUDataElement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMUDataElement_descriptor_;
}

const IMUDataElement& IMUDataElement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BotResponse_2eproto();
  return *default_instance_;
}

IMUDataElement* IMUDataElement::default_instance_ = NULL;

IMUDataElement* IMUDataElement::New(::google::protobuf::Arena* arena) const {
  IMUDataElement* n = new IMUDataElement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMUDataElement::Clear() {
// @@protoc_insertion_point(message_clear_start:IMUDataElement)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IMUDataElement, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IMUDataElement*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool IMUDataElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IMUDataElement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_z;
        break;
      }

      // optional int32 z = 3;
      case 3: {
        if (tag == 24) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IMUDataElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IMUDataElement)
  return false;
#undef DO_
}

void IMUDataElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IMUDataElement)
  // optional int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:IMUDataElement)
}

::google::protobuf::uint8* IMUDataElement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IMUDataElement)
  // optional int32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional int32 z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IMUDataElement)
  return target;
}

int IMUDataElement::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IMUDataElement)
  int total_size = 0;

  // optional int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  // optional int32 z = 3;
  if (this->z() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->z());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUDataElement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IMUDataElement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IMUDataElement* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IMUDataElement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IMUDataElement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IMUDataElement)
    MergeFrom(*source);
  }
}

void IMUDataElement::MergeFrom(const IMUDataElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IMUDataElement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void IMUDataElement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IMUDataElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMUDataElement::CopyFrom(const IMUDataElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IMUDataElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUDataElement::IsInitialized() const {

  return true;
}

void IMUDataElement::Swap(IMUDataElement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMUDataElement::InternalSwap(IMUDataElement* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMUDataElement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IMUDataElement_descriptor_;
  metadata.reflection = IMUDataElement_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMUDataElement

// optional int32 x = 1;
void IMUDataElement::clear_x() {
  x_ = 0;
}
 ::google::protobuf::int32 IMUDataElement::x() const {
  // @@protoc_insertion_point(field_get:IMUDataElement.x)
  return x_;
}
 void IMUDataElement::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:IMUDataElement.x)
}

// optional int32 y = 2;
void IMUDataElement::clear_y() {
  y_ = 0;
}
 ::google::protobuf::int32 IMUDataElement::y() const {
  // @@protoc_insertion_point(field_get:IMUDataElement.y)
  return y_;
}
 void IMUDataElement::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:IMUDataElement.y)
}

// optional int32 z = 3;
void IMUDataElement::clear_z() {
  z_ = 0;
}
 ::google::protobuf::int32 IMUDataElement::z() const {
  // @@protoc_insertion_point(field_get:IMUDataElement.z)
  return z_;
}
 void IMUDataElement::set_z(::google::protobuf::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:IMUDataElement.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Quaternion::kWFieldNumber;
const int Quaternion::kXFieldNumber;
const int Quaternion::kYFieldNumber;
const int Quaternion::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Quaternion::Quaternion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Quaternion)
}

void Quaternion::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Quaternion::Quaternion(const Quaternion& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Quaternion)
}

void Quaternion::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  w_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
}

Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:Quaternion)
  SharedDtor();
}

void Quaternion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Quaternion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quaternion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quaternion_descriptor_;
}

const Quaternion& Quaternion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BotResponse_2eproto();
  return *default_instance_;
}

Quaternion* Quaternion::default_instance_ = NULL;

Quaternion* Quaternion::New(::google::protobuf::Arena* arena) const {
  Quaternion* n = new Quaternion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:Quaternion)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Quaternion, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Quaternion*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(w_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool Quaternion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Quaternion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 w = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // optional int32 x = 2;
      case 2: {
        if (tag == 16) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // optional int32 y = 3;
      case 3: {
        if (tag == 24) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_z;
        break;
      }

      // optional int32 z = 4;
      case 4: {
        if (tag == 32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Quaternion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Quaternion)
  return false;
#undef DO_
}

void Quaternion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Quaternion)
  // optional int32 w = 1;
  if (this->w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->w(), output);
  }

  // optional int32 x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // optional int32 y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  // optional int32 z = 4;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:Quaternion)
}

::google::protobuf::uint8* Quaternion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Quaternion)
  // optional int32 w = 1;
  if (this->w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->w(), target);
  }

  // optional int32 x = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // optional int32 y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  // optional int32 z = 4;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Quaternion)
  return target;
}

int Quaternion::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Quaternion)
  int total_size = 0;

  // optional int32 w = 1;
  if (this->w() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->w());
  }

  // optional int32 x = 2;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // optional int32 y = 3;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  // optional int32 z = 4;
  if (this->z() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->z());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quaternion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Quaternion)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Quaternion* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Quaternion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Quaternion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Quaternion)
    MergeFrom(*source);
  }
}

void Quaternion::MergeFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Quaternion)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.w() != 0) {
    set_w(from.w());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Quaternion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternion::IsInitialized() const {

  return true;
}

void Quaternion::Swap(Quaternion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Quaternion::InternalSwap(Quaternion* other) {
  std::swap(w_, other->w_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Quaternion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quaternion_descriptor_;
  metadata.reflection = Quaternion_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Quaternion

// optional int32 w = 1;
void Quaternion::clear_w() {
  w_ = 0;
}
 ::google::protobuf::int32 Quaternion::w() const {
  // @@protoc_insertion_point(field_get:Quaternion.w)
  return w_;
}
 void Quaternion::set_w(::google::protobuf::int32 value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:Quaternion.w)
}

// optional int32 x = 2;
void Quaternion::clear_x() {
  x_ = 0;
}
 ::google::protobuf::int32 Quaternion::x() const {
  // @@protoc_insertion_point(field_get:Quaternion.x)
  return x_;
}
 void Quaternion::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Quaternion.x)
}

// optional int32 y = 3;
void Quaternion::clear_y() {
  y_ = 0;
}
 ::google::protobuf::int32 Quaternion::y() const {
  // @@protoc_insertion_point(field_get:Quaternion.y)
  return y_;
}
 void Quaternion::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Quaternion.y)
}

// optional int32 z = 4;
void Quaternion::clear_z() {
  z_ = 0;
}
 ::google::protobuf::int32 Quaternion::z() const {
  // @@protoc_insertion_point(field_get:Quaternion.z)
  return z_;
}
 void Quaternion::set_z(::google::protobuf::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:Quaternion.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMUData::kAngularVelocityFieldNumber;
const int IMUData::kLinearAccelerationFieldNumber;
const int IMUData::kOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMUData::IMUData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IMUData)
}

void IMUData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  angular_velocity_ = const_cast< ::IMUDataElement*>(&::IMUDataElement::default_instance());
  linear_acceleration_ = const_cast< ::IMUDataElement*>(&::IMUDataElement::default_instance());
  orientation_ = const_cast< ::Quaternion*>(&::Quaternion::default_instance());
}

IMUData::IMUData(const IMUData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IMUData)
}

void IMUData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  angular_velocity_ = NULL;
  linear_acceleration_ = NULL;
  orientation_ = NULL;
}

IMUData::~IMUData() {
  // @@protoc_insertion_point(destructor:IMUData)
  SharedDtor();
}

void IMUData::SharedDtor() {
  if (this != default_instance_) {
    delete angular_velocity_;
    delete linear_acceleration_;
    delete orientation_;
  }
}

void IMUData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMUData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMUData_descriptor_;
}

const IMUData& IMUData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BotResponse_2eproto();
  return *default_instance_;
}

IMUData* IMUData::default_instance_ = NULL;

IMUData* IMUData::New(::google::protobuf::Arena* arena) const {
  IMUData* n = new IMUData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMUData::Clear() {
// @@protoc_insertion_point(message_clear_start:IMUData)
  if (GetArenaNoVirtual() == NULL && angular_velocity_ != NULL) delete angular_velocity_;
  angular_velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && linear_acceleration_ != NULL) delete linear_acceleration_;
  linear_acceleration_ = NULL;
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) delete orientation_;
  orientation_ = NULL;
}

bool IMUData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IMUData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .IMUDataElement angular_velocity = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_linear_acceleration;
        break;
      }

      // optional .IMUDataElement linear_acceleration = 2;
      case 2: {
        if (tag == 18) {
         parse_linear_acceleration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_acceleration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_orientation;
        break;
      }

      // optional .Quaternion orientation = 3;
      case 3: {
        if (tag == 26) {
         parse_orientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IMUData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IMUData)
  return false;
#undef DO_
}

void IMUData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IMUData)
  // optional .IMUDataElement angular_velocity = 1;
  if (this->has_angular_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->angular_velocity_, output);
  }

  // optional .IMUDataElement linear_acceleration = 2;
  if (this->has_linear_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->linear_acceleration_, output);
  }

  // optional .Quaternion orientation = 3;
  if (this->has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->orientation_, output);
  }

  // @@protoc_insertion_point(serialize_end:IMUData)
}

::google::protobuf::uint8* IMUData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IMUData)
  // optional .IMUDataElement angular_velocity = 1;
  if (this->has_angular_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->angular_velocity_, false, target);
  }

  // optional .IMUDataElement linear_acceleration = 2;
  if (this->has_linear_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->linear_acceleration_, false, target);
  }

  // optional .Quaternion orientation = 3;
  if (this->has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->orientation_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IMUData)
  return target;
}

int IMUData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IMUData)
  int total_size = 0;

  // optional .IMUDataElement angular_velocity = 1;
  if (this->has_angular_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angular_velocity_);
  }

  // optional .IMUDataElement linear_acceleration = 2;
  if (this->has_linear_acceleration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linear_acceleration_);
  }

  // optional .Quaternion orientation = 3;
  if (this->has_orientation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IMUData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IMUData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IMUData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IMUData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IMUData)
    MergeFrom(*source);
  }
}

void IMUData::MergeFrom(const IMUData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IMUData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_angular_velocity()) {
    mutable_angular_velocity()->::IMUDataElement::MergeFrom(from.angular_velocity());
  }
  if (from.has_linear_acceleration()) {
    mutable_linear_acceleration()->::IMUDataElement::MergeFrom(from.linear_acceleration());
  }
  if (from.has_orientation()) {
    mutable_orientation()->::Quaternion::MergeFrom(from.orientation());
  }
}

void IMUData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IMUData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMUData::CopyFrom(const IMUData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IMUData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUData::IsInitialized() const {

  return true;
}

void IMUData::Swap(IMUData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMUData::InternalSwap(IMUData* other) {
  std::swap(angular_velocity_, other->angular_velocity_);
  std::swap(linear_acceleration_, other->linear_acceleration_);
  std::swap(orientation_, other->orientation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMUData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IMUData_descriptor_;
  metadata.reflection = IMUData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMUData

// optional .IMUDataElement angular_velocity = 1;
bool IMUData::has_angular_velocity() const {
  return !_is_default_instance_ && angular_velocity_ != NULL;
}
void IMUData::clear_angular_velocity() {
  if (GetArenaNoVirtual() == NULL && angular_velocity_ != NULL) delete angular_velocity_;
  angular_velocity_ = NULL;
}
const ::IMUDataElement& IMUData::angular_velocity() const {
  // @@protoc_insertion_point(field_get:IMUData.angular_velocity)
  return angular_velocity_ != NULL ? *angular_velocity_ : *default_instance_->angular_velocity_;
}
::IMUDataElement* IMUData::mutable_angular_velocity() {
  
  if (angular_velocity_ == NULL) {
    angular_velocity_ = new ::IMUDataElement;
  }
  // @@protoc_insertion_point(field_mutable:IMUData.angular_velocity)
  return angular_velocity_;
}
::IMUDataElement* IMUData::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:IMUData.angular_velocity)
  
  ::IMUDataElement* temp = angular_velocity_;
  angular_velocity_ = NULL;
  return temp;
}
void IMUData::set_allocated_angular_velocity(::IMUDataElement* angular_velocity) {
  delete angular_velocity_;
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:IMUData.angular_velocity)
}

// optional .IMUDataElement linear_acceleration = 2;
bool IMUData::has_linear_acceleration() const {
  return !_is_default_instance_ && linear_acceleration_ != NULL;
}
void IMUData::clear_linear_acceleration() {
  if (GetArenaNoVirtual() == NULL && linear_acceleration_ != NULL) delete linear_acceleration_;
  linear_acceleration_ = NULL;
}
const ::IMUDataElement& IMUData::linear_acceleration() const {
  // @@protoc_insertion_point(field_get:IMUData.linear_acceleration)
  return linear_acceleration_ != NULL ? *linear_acceleration_ : *default_instance_->linear_acceleration_;
}
::IMUDataElement* IMUData::mutable_linear_acceleration() {
  
  if (linear_acceleration_ == NULL) {
    linear_acceleration_ = new ::IMUDataElement;
  }
  // @@protoc_insertion_point(field_mutable:IMUData.linear_acceleration)
  return linear_acceleration_;
}
::IMUDataElement* IMUData::release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:IMUData.linear_acceleration)
  
  ::IMUDataElement* temp = linear_acceleration_;
  linear_acceleration_ = NULL;
  return temp;
}
void IMUData::set_allocated_linear_acceleration(::IMUDataElement* linear_acceleration) {
  delete linear_acceleration_;
  linear_acceleration_ = linear_acceleration;
  if (linear_acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:IMUData.linear_acceleration)
}

// optional .Quaternion orientation = 3;
bool IMUData::has_orientation() const {
  return !_is_default_instance_ && orientation_ != NULL;
}
void IMUData::clear_orientation() {
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) delete orientation_;
  orientation_ = NULL;
}
const ::Quaternion& IMUData::orientation() const {
  // @@protoc_insertion_point(field_get:IMUData.orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
::Quaternion* IMUData::mutable_orientation() {
  
  if (orientation_ == NULL) {
    orientation_ = new ::Quaternion;
  }
  // @@protoc_insertion_point(field_mutable:IMUData.orientation)
  return orientation_;
}
::Quaternion* IMUData::release_orientation() {
  // @@protoc_insertion_point(field_release:IMUData.orientation)
  
  ::Quaternion* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
void IMUData::set_allocated_orientation(::Quaternion* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:IMUData.orientation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatteryVoltage::kVoltageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatteryVoltage::BatteryVoltage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BatteryVoltage)
}

void BatteryVoltage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BatteryVoltage::BatteryVoltage(const BatteryVoltage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BatteryVoltage)
}

void BatteryVoltage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  voltage_ = 0;
}

BatteryVoltage::~BatteryVoltage() {
  // @@protoc_insertion_point(destructor:BatteryVoltage)
  SharedDtor();
}

void BatteryVoltage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BatteryVoltage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatteryVoltage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatteryVoltage_descriptor_;
}

const BatteryVoltage& BatteryVoltage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BotResponse_2eproto();
  return *default_instance_;
}

BatteryVoltage* BatteryVoltage::default_instance_ = NULL;

BatteryVoltage* BatteryVoltage::New(::google::protobuf::Arena* arena) const {
  BatteryVoltage* n = new BatteryVoltage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatteryVoltage::Clear() {
// @@protoc_insertion_point(message_clear_start:BatteryVoltage)
  voltage_ = 0;
}

bool BatteryVoltage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BatteryVoltage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float voltage = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &voltage_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BatteryVoltage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BatteryVoltage)
  return false;
#undef DO_
}

void BatteryVoltage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BatteryVoltage)
  // optional float voltage = 1;
  if (this->voltage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->voltage(), output);
  }

  // @@protoc_insertion_point(serialize_end:BatteryVoltage)
}

::google::protobuf::uint8* BatteryVoltage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BatteryVoltage)
  // optional float voltage = 1;
  if (this->voltage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->voltage(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BatteryVoltage)
  return target;
}

int BatteryVoltage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BatteryVoltage)
  int total_size = 0;

  // optional float voltage = 1;
  if (this->voltage() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatteryVoltage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BatteryVoltage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BatteryVoltage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BatteryVoltage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BatteryVoltage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BatteryVoltage)
    MergeFrom(*source);
  }
}

void BatteryVoltage::MergeFrom(const BatteryVoltage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BatteryVoltage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.voltage() != 0) {
    set_voltage(from.voltage());
  }
}

void BatteryVoltage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BatteryVoltage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatteryVoltage::CopyFrom(const BatteryVoltage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BatteryVoltage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatteryVoltage::IsInitialized() const {

  return true;
}

void BatteryVoltage::Swap(BatteryVoltage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatteryVoltage::InternalSwap(BatteryVoltage* other) {
  std::swap(voltage_, other->voltage_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatteryVoltage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatteryVoltage_descriptor_;
  metadata.reflection = BatteryVoltage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatteryVoltage

// optional float voltage = 1;
void BatteryVoltage::clear_voltage() {
  voltage_ = 0;
}
 float BatteryVoltage::voltage() const {
  // @@protoc_insertion_point(field_get:BatteryVoltage.voltage)
  return voltage_;
}
 void BatteryVoltage::set_voltage(float value) {
  
  voltage_ = value;
  // @@protoc_insertion_point(field_set:BatteryVoltage.voltage)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BumperStatus::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BumperStatus::BumperStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BumperStatus)
}

void BumperStatus::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BumperStatus::BumperStatus(const BumperStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BumperStatus)
}

void BumperStatus::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0u;
}

BumperStatus::~BumperStatus() {
  // @@protoc_insertion_point(destructor:BumperStatus)
  SharedDtor();
}

void BumperStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BumperStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BumperStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BumperStatus_descriptor_;
}

const BumperStatus& BumperStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BotResponse_2eproto();
  return *default_instance_;
}

BumperStatus* BumperStatus::default_instance_ = NULL;

BumperStatus* BumperStatus::New(::google::protobuf::Arena* arena) const {
  BumperStatus* n = new BumperStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BumperStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:BumperStatus)
  status_ = 0u;
}

bool BumperStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BumperStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BumperStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BumperStatus)
  return false;
#undef DO_
}

void BumperStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BumperStatus)
  // optional uint32 status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:BumperStatus)
}

::google::protobuf::uint8* BumperStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BumperStatus)
  // optional uint32 status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BumperStatus)
  return target;
}

int BumperStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BumperStatus)
  int total_size = 0;

  // optional uint32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BumperStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BumperStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BumperStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BumperStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BumperStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BumperStatus)
    MergeFrom(*source);
  }
}

void BumperStatus::MergeFrom(const BumperStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BumperStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void BumperStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BumperStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BumperStatus::CopyFrom(const BumperStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BumperStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BumperStatus::IsInitialized() const {

  return true;
}

void BumperStatus::Swap(BumperStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BumperStatus::InternalSwap(BumperStatus* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BumperStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BumperStatus_descriptor_;
  metadata.reflection = BumperStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BumperStatus

// optional uint32 status = 1;
void BumperStatus::clear_status() {
  status_ = 0u;
}
 ::google::protobuf::uint32 BumperStatus::status() const {
  // @@protoc_insertion_point(field_get:BumperStatus.status)
  return status_;
}
 void BumperStatus::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:BumperStatus.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
