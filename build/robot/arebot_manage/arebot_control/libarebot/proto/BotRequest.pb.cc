// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BotRequest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BotRequest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BotRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BotRequest_reflection_ = NULL;
struct BotRequestOneofInstance {
  const ::IMUInit* imu_init_;
  const ::BusRequest* bus_request_;
  const ::BusBaudrate* bus_baudrate_;
  const ::OLEDWrite* oled_write_;
}* BotRequest_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* IMUInit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IMUInit_reflection_ = NULL;
const ::google::protobuf::Descriptor* BusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BusBaudrate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BusBaudrate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BusBaudrate_Parity_descriptor_ = NULL;
const ::google::protobuf::Descriptor* OLEDWrite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OLEDWrite_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BotRequest_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_BotRequest_2eproto() {
  protobuf_AddDesc_BotRequest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BotRequest.proto");
  GOOGLE_CHECK(file != NULL);
  BotRequest_descriptor_ = file->message_type(0);
  static const int BotRequest_offsets_[5] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(BotRequest_default_oneof_instance_, imu_init_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(BotRequest_default_oneof_instance_, bus_request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(BotRequest_default_oneof_instance_, bus_baudrate_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(BotRequest_default_oneof_instance_, oled_write_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotRequest, body_),
  };
  BotRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BotRequest_descriptor_,
      BotRequest::default_instance_,
      BotRequest_offsets_,
      -1,
      -1,
      -1,
      BotRequest_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotRequest, _oneof_case_[0]),
      sizeof(BotRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotRequest, _is_default_instance_));
  IMUInit_descriptor_ = file->message_type(1);
  static const int IMUInit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUInit, self_test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUInit, report_frequency_),
  };
  IMUInit_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IMUInit_descriptor_,
      IMUInit::default_instance_,
      IMUInit_offsets_,
      -1,
      -1,
      -1,
      sizeof(IMUInit),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUInit, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUInit, _is_default_instance_));
  BusRequest_descriptor_ = file->message_type(2);
  static const int BusRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusRequest, bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusRequest, tx_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusRequest, rx_len_),
  };
  BusRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BusRequest_descriptor_,
      BusRequest::default_instance_,
      BusRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(BusRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusRequest, _is_default_instance_));
  BusBaudrate_descriptor_ = file->message_type(3);
  static const int BusBaudrate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusBaudrate, bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusBaudrate, baudrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusBaudrate, parity_),
  };
  BusBaudrate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BusBaudrate_descriptor_,
      BusBaudrate::default_instance_,
      BusBaudrate_offsets_,
      -1,
      -1,
      -1,
      sizeof(BusBaudrate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusBaudrate, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BusBaudrate, _is_default_instance_));
  BusBaudrate_Parity_descriptor_ = BusBaudrate_descriptor_->enum_type(0);
  OLEDWrite_descriptor_ = file->message_type(4);
  static const int OLEDWrite_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLEDWrite, page_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLEDWrite, page_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLEDWrite, col_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLEDWrite, col_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLEDWrite, data_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLEDWrite, is_string_),
  };
  OLEDWrite_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OLEDWrite_descriptor_,
      OLEDWrite::default_instance_,
      OLEDWrite_offsets_,
      -1,
      -1,
      -1,
      sizeof(OLEDWrite),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLEDWrite, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OLEDWrite, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BotRequest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BotRequest_descriptor_, &BotRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IMUInit_descriptor_, &IMUInit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BusRequest_descriptor_, &BusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BusBaudrate_descriptor_, &BusBaudrate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OLEDWrite_descriptor_, &OLEDWrite::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BotRequest_2eproto() {
  delete BotRequest::default_instance_;
  delete BotRequest_default_oneof_instance_;
  delete BotRequest_reflection_;
  delete IMUInit::default_instance_;
  delete IMUInit_reflection_;
  delete BusRequest::default_instance_;
  delete BusRequest_reflection_;
  delete BusBaudrate::default_instance_;
  delete BusBaudrate_reflection_;
  delete OLEDWrite::default_instance_;
  delete OLEDWrite_reflection_;
}

void protobuf_AddDesc_BotRequest_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_BotRequest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020BotRequest.proto\"\236\001\n\nBotRequest\022\034\n\010imu"
    "_init\030\001 \001(\0132\010.IMUInitH\000\022\"\n\013bus_request\030\002"
    " \001(\0132\013.BusRequestH\000\022$\n\014bus_baudrate\030\003 \001("
    "\0132\014.BusBaudrateH\000\022 \n\noled_write\030\004 \001(\0132\n."
    "OLEDWriteH\000B\006\n\004body\"6\n\007IMUInit\022\021\n\tself_t"
    "est\030\001 \001(\010\022\030\n\020report_frequency\030\002 \001(\r\"<\n\nB"
    "usRequest\022\016\n\006bus_id\030\001 \001(\r\022\016\n\006tx_len\030\002 \001("
    "\r\022\016\n\006rx_len\030\003 \001(\r\"\205\001\n\013BusBaudrate\022\016\n\006bus"
    "_id\030\001 \001(\r\022\020\n\010baudrate\030\002 \001(\r\022#\n\006parity\030\003 "
    "\001(\0162\023.BusBaudrate.Parity\"/\n\006Parity\022\013\n\007PA"
    "R_8E1\020\000\022\013\n\007PAR_8N2\020\001\022\013\n\007PAR_8N1\020\003\"z\n\tOLE"
    "DWrite\022\022\n\npage_start\030\001 \001(\r\022\020\n\010page_end\030\002"
    " \001(\r\022\021\n\tcol_start\030\003 \001(\r\022\017\n\007col_end\030\004 \001(\r"
    "\022\020\n\010data_len\030\005 \001(\r\022\021\n\tis_string\030\006 \001(\010b\006p"
    "roto3", 565);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BotRequest.proto", &protobuf_RegisterTypes);
  BotRequest::default_instance_ = new BotRequest();
  BotRequest_default_oneof_instance_ = new BotRequestOneofInstance();
  IMUInit::default_instance_ = new IMUInit();
  BusRequest::default_instance_ = new BusRequest();
  BusBaudrate::default_instance_ = new BusBaudrate();
  OLEDWrite::default_instance_ = new OLEDWrite();
  BotRequest::default_instance_->InitAsDefaultInstance();
  IMUInit::default_instance_->InitAsDefaultInstance();
  BusRequest::default_instance_->InitAsDefaultInstance();
  BusBaudrate::default_instance_->InitAsDefaultInstance();
  OLEDWrite::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BotRequest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BotRequest_2eproto {
  StaticDescriptorInitializer_BotRequest_2eproto() {
    protobuf_AddDesc_BotRequest_2eproto();
  }
} static_descriptor_initializer_BotRequest_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BotRequest::kImuInitFieldNumber;
const int BotRequest::kBusRequestFieldNumber;
const int BotRequest::kBusBaudrateFieldNumber;
const int BotRequest::kOledWriteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BotRequest::BotRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BotRequest)
}

void BotRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  BotRequest_default_oneof_instance_->imu_init_ = const_cast< ::IMUInit*>(&::IMUInit::default_instance());
  BotRequest_default_oneof_instance_->bus_request_ = const_cast< ::BusRequest*>(&::BusRequest::default_instance());
  BotRequest_default_oneof_instance_->bus_baudrate_ = const_cast< ::BusBaudrate*>(&::BusBaudrate::default_instance());
  BotRequest_default_oneof_instance_->oled_write_ = const_cast< ::OLEDWrite*>(&::OLEDWrite::default_instance());
}

BotRequest::BotRequest(const BotRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BotRequest)
}

void BotRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_body();
}

BotRequest::~BotRequest() {
  // @@protoc_insertion_point(destructor:BotRequest)
  SharedDtor();
}

void BotRequest::SharedDtor() {
  if (has_body()) {
    clear_body();
  }
  if (this != default_instance_) {
  }
}

void BotRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BotRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BotRequest_descriptor_;
}

const BotRequest& BotRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BotRequest_2eproto();
  return *default_instance_;
}

BotRequest* BotRequest::default_instance_ = NULL;

BotRequest* BotRequest::New(::google::protobuf::Arena* arena) const {
  BotRequest* n = new BotRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BotRequest::clear_body() {
// @@protoc_insertion_point(one_of_clear_start:BotRequest)
  switch(body_case()) {
    case kImuInit: {
      delete body_.imu_init_;
      break;
    }
    case kBusRequest: {
      delete body_.bus_request_;
      break;
    }
    case kBusBaudrate: {
      delete body_.bus_baudrate_;
      break;
    }
    case kOledWrite: {
      delete body_.oled_write_;
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BODY_NOT_SET;
}


void BotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:BotRequest)
  clear_body();
}

bool BotRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BotRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .IMUInit imu_init = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imu_init()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bus_request;
        break;
      }

      // optional .BusRequest bus_request = 2;
      case 2: {
        if (tag == 18) {
         parse_bus_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bus_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bus_baudrate;
        break;
      }

      // optional .BusBaudrate bus_baudrate = 3;
      case 3: {
        if (tag == 26) {
         parse_bus_baudrate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bus_baudrate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_oled_write;
        break;
      }

      // optional .OLEDWrite oled_write = 4;
      case 4: {
        if (tag == 34) {
         parse_oled_write:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oled_write()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BotRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BotRequest)
  return false;
#undef DO_
}

void BotRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BotRequest)
  // optional .IMUInit imu_init = 1;
  if (has_imu_init()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *body_.imu_init_, output);
  }

  // optional .BusRequest bus_request = 2;
  if (has_bus_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *body_.bus_request_, output);
  }

  // optional .BusBaudrate bus_baudrate = 3;
  if (has_bus_baudrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *body_.bus_baudrate_, output);
  }

  // optional .OLEDWrite oled_write = 4;
  if (has_oled_write()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *body_.oled_write_, output);
  }

  // @@protoc_insertion_point(serialize_end:BotRequest)
}

::google::protobuf::uint8* BotRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BotRequest)
  // optional .IMUInit imu_init = 1;
  if (has_imu_init()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *body_.imu_init_, false, target);
  }

  // optional .BusRequest bus_request = 2;
  if (has_bus_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *body_.bus_request_, false, target);
  }

  // optional .BusBaudrate bus_baudrate = 3;
  if (has_bus_baudrate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *body_.bus_baudrate_, false, target);
  }

  // optional .OLEDWrite oled_write = 4;
  if (has_oled_write()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *body_.oled_write_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BotRequest)
  return target;
}

int BotRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BotRequest)
  int total_size = 0;

  switch (body_case()) {
    // optional .IMUInit imu_init = 1;
    case kImuInit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.imu_init_);
      break;
    }
    // optional .BusRequest bus_request = 2;
    case kBusRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.bus_request_);
      break;
    }
    // optional .BusBaudrate bus_baudrate = 3;
    case kBusBaudrate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.bus_baudrate_);
      break;
    }
    // optional .OLEDWrite oled_write = 4;
    case kOledWrite: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.oled_write_);
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BotRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BotRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BotRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BotRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BotRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BotRequest)
    MergeFrom(*source);
  }
}

void BotRequest::MergeFrom(const BotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BotRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.body_case()) {
    case kImuInit: {
      mutable_imu_init()->::IMUInit::MergeFrom(from.imu_init());
      break;
    }
    case kBusRequest: {
      mutable_bus_request()->::BusRequest::MergeFrom(from.bus_request());
      break;
    }
    case kBusBaudrate: {
      mutable_bus_baudrate()->::BusBaudrate::MergeFrom(from.bus_baudrate());
      break;
    }
    case kOledWrite: {
      mutable_oled_write()->::OLEDWrite::MergeFrom(from.oled_write());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
}

void BotRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BotRequest::CopyFrom(const BotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BotRequest::IsInitialized() const {

  return true;
}

void BotRequest::Swap(BotRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BotRequest::InternalSwap(BotRequest* other) {
  std::swap(body_, other->body_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BotRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BotRequest_descriptor_;
  metadata.reflection = BotRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BotRequest

// optional .IMUInit imu_init = 1;
bool BotRequest::has_imu_init() const {
  return body_case() == kImuInit;
}
void BotRequest::set_has_imu_init() {
  _oneof_case_[0] = kImuInit;
}
void BotRequest::clear_imu_init() {
  if (has_imu_init()) {
    delete body_.imu_init_;
    clear_has_body();
  }
}
 const ::IMUInit& BotRequest::imu_init() const {
  // @@protoc_insertion_point(field_get:BotRequest.imu_init)
  return has_imu_init()
      ? *body_.imu_init_
      : ::IMUInit::default_instance();
}
::IMUInit* BotRequest::mutable_imu_init() {
  if (!has_imu_init()) {
    clear_body();
    set_has_imu_init();
    body_.imu_init_ = new ::IMUInit;
  }
  // @@protoc_insertion_point(field_mutable:BotRequest.imu_init)
  return body_.imu_init_;
}
::IMUInit* BotRequest::release_imu_init() {
  // @@protoc_insertion_point(field_release:BotRequest.imu_init)
  if (has_imu_init()) {
    clear_has_body();
    ::IMUInit* temp = body_.imu_init_;
    body_.imu_init_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void BotRequest::set_allocated_imu_init(::IMUInit* imu_init) {
  clear_body();
  if (imu_init) {
    set_has_imu_init();
    body_.imu_init_ = imu_init;
  }
  // @@protoc_insertion_point(field_set_allocated:BotRequest.imu_init)
}

// optional .BusRequest bus_request = 2;
bool BotRequest::has_bus_request() const {
  return body_case() == kBusRequest;
}
void BotRequest::set_has_bus_request() {
  _oneof_case_[0] = kBusRequest;
}
void BotRequest::clear_bus_request() {
  if (has_bus_request()) {
    delete body_.bus_request_;
    clear_has_body();
  }
}
 const ::BusRequest& BotRequest::bus_request() const {
  // @@protoc_insertion_point(field_get:BotRequest.bus_request)
  return has_bus_request()
      ? *body_.bus_request_
      : ::BusRequest::default_instance();
}
::BusRequest* BotRequest::mutable_bus_request() {
  if (!has_bus_request()) {
    clear_body();
    set_has_bus_request();
    body_.bus_request_ = new ::BusRequest;
  }
  // @@protoc_insertion_point(field_mutable:BotRequest.bus_request)
  return body_.bus_request_;
}
::BusRequest* BotRequest::release_bus_request() {
  // @@protoc_insertion_point(field_release:BotRequest.bus_request)
  if (has_bus_request()) {
    clear_has_body();
    ::BusRequest* temp = body_.bus_request_;
    body_.bus_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void BotRequest::set_allocated_bus_request(::BusRequest* bus_request) {
  clear_body();
  if (bus_request) {
    set_has_bus_request();
    body_.bus_request_ = bus_request;
  }
  // @@protoc_insertion_point(field_set_allocated:BotRequest.bus_request)
}

// optional .BusBaudrate bus_baudrate = 3;
bool BotRequest::has_bus_baudrate() const {
  return body_case() == kBusBaudrate;
}
void BotRequest::set_has_bus_baudrate() {
  _oneof_case_[0] = kBusBaudrate;
}
void BotRequest::clear_bus_baudrate() {
  if (has_bus_baudrate()) {
    delete body_.bus_baudrate_;
    clear_has_body();
  }
}
 const ::BusBaudrate& BotRequest::bus_baudrate() const {
  // @@protoc_insertion_point(field_get:BotRequest.bus_baudrate)
  return has_bus_baudrate()
      ? *body_.bus_baudrate_
      : ::BusBaudrate::default_instance();
}
::BusBaudrate* BotRequest::mutable_bus_baudrate() {
  if (!has_bus_baudrate()) {
    clear_body();
    set_has_bus_baudrate();
    body_.bus_baudrate_ = new ::BusBaudrate;
  }
  // @@protoc_insertion_point(field_mutable:BotRequest.bus_baudrate)
  return body_.bus_baudrate_;
}
::BusBaudrate* BotRequest::release_bus_baudrate() {
  // @@protoc_insertion_point(field_release:BotRequest.bus_baudrate)
  if (has_bus_baudrate()) {
    clear_has_body();
    ::BusBaudrate* temp = body_.bus_baudrate_;
    body_.bus_baudrate_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void BotRequest::set_allocated_bus_baudrate(::BusBaudrate* bus_baudrate) {
  clear_body();
  if (bus_baudrate) {
    set_has_bus_baudrate();
    body_.bus_baudrate_ = bus_baudrate;
  }
  // @@protoc_insertion_point(field_set_allocated:BotRequest.bus_baudrate)
}

// optional .OLEDWrite oled_write = 4;
bool BotRequest::has_oled_write() const {
  return body_case() == kOledWrite;
}
void BotRequest::set_has_oled_write() {
  _oneof_case_[0] = kOledWrite;
}
void BotRequest::clear_oled_write() {
  if (has_oled_write()) {
    delete body_.oled_write_;
    clear_has_body();
  }
}
 const ::OLEDWrite& BotRequest::oled_write() const {
  // @@protoc_insertion_point(field_get:BotRequest.oled_write)
  return has_oled_write()
      ? *body_.oled_write_
      : ::OLEDWrite::default_instance();
}
::OLEDWrite* BotRequest::mutable_oled_write() {
  if (!has_oled_write()) {
    clear_body();
    set_has_oled_write();
    body_.oled_write_ = new ::OLEDWrite;
  }
  // @@protoc_insertion_point(field_mutable:BotRequest.oled_write)
  return body_.oled_write_;
}
::OLEDWrite* BotRequest::release_oled_write() {
  // @@protoc_insertion_point(field_release:BotRequest.oled_write)
  if (has_oled_write()) {
    clear_has_body();
    ::OLEDWrite* temp = body_.oled_write_;
    body_.oled_write_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void BotRequest::set_allocated_oled_write(::OLEDWrite* oled_write) {
  clear_body();
  if (oled_write) {
    set_has_oled_write();
    body_.oled_write_ = oled_write;
  }
  // @@protoc_insertion_point(field_set_allocated:BotRequest.oled_write)
}

bool BotRequest::has_body() const {
  return body_case() != BODY_NOT_SET;
}
void BotRequest::clear_has_body() {
  _oneof_case_[0] = BODY_NOT_SET;
}
BotRequest::BodyCase BotRequest::body_case() const {
  return BotRequest::BodyCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMUInit::kSelfTestFieldNumber;
const int IMUInit::kReportFrequencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMUInit::IMUInit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IMUInit)
}

void IMUInit::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

IMUInit::IMUInit(const IMUInit& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IMUInit)
}

void IMUInit::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  self_test_ = false;
  report_frequency_ = 0u;
}

IMUInit::~IMUInit() {
  // @@protoc_insertion_point(destructor:IMUInit)
  SharedDtor();
}

void IMUInit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IMUInit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMUInit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMUInit_descriptor_;
}

const IMUInit& IMUInit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BotRequest_2eproto();
  return *default_instance_;
}

IMUInit* IMUInit::default_instance_ = NULL;

IMUInit* IMUInit::New(::google::protobuf::Arena* arena) const {
  IMUInit* n = new IMUInit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMUInit::Clear() {
// @@protoc_insertion_point(message_clear_start:IMUInit)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IMUInit, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IMUInit*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(self_test_, report_frequency_);

#undef ZR_HELPER_
#undef ZR_

}

bool IMUInit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IMUInit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool self_test = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &self_test_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_report_frequency;
        break;
      }

      // optional uint32 report_frequency = 2;
      case 2: {
        if (tag == 16) {
         parse_report_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &report_frequency_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IMUInit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IMUInit)
  return false;
#undef DO_
}

void IMUInit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IMUInit)
  // optional bool self_test = 1;
  if (this->self_test() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->self_test(), output);
  }

  // optional uint32 report_frequency = 2;
  if (this->report_frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->report_frequency(), output);
  }

  // @@protoc_insertion_point(serialize_end:IMUInit)
}

::google::protobuf::uint8* IMUInit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IMUInit)
  // optional bool self_test = 1;
  if (this->self_test() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->self_test(), target);
  }

  // optional uint32 report_frequency = 2;
  if (this->report_frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->report_frequency(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IMUInit)
  return target;
}

int IMUInit::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IMUInit)
  int total_size = 0;

  // optional bool self_test = 1;
  if (this->self_test() != 0) {
    total_size += 1 + 1;
  }

  // optional uint32 report_frequency = 2;
  if (this->report_frequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->report_frequency());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUInit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IMUInit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IMUInit* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IMUInit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IMUInit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IMUInit)
    MergeFrom(*source);
  }
}

void IMUInit::MergeFrom(const IMUInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IMUInit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.self_test() != 0) {
    set_self_test(from.self_test());
  }
  if (from.report_frequency() != 0) {
    set_report_frequency(from.report_frequency());
  }
}

void IMUInit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IMUInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMUInit::CopyFrom(const IMUInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IMUInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUInit::IsInitialized() const {

  return true;
}

void IMUInit::Swap(IMUInit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMUInit::InternalSwap(IMUInit* other) {
  std::swap(self_test_, other->self_test_);
  std::swap(report_frequency_, other->report_frequency_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMUInit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IMUInit_descriptor_;
  metadata.reflection = IMUInit_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMUInit

// optional bool self_test = 1;
void IMUInit::clear_self_test() {
  self_test_ = false;
}
 bool IMUInit::self_test() const {
  // @@protoc_insertion_point(field_get:IMUInit.self_test)
  return self_test_;
}
 void IMUInit::set_self_test(bool value) {
  
  self_test_ = value;
  // @@protoc_insertion_point(field_set:IMUInit.self_test)
}

// optional uint32 report_frequency = 2;
void IMUInit::clear_report_frequency() {
  report_frequency_ = 0u;
}
 ::google::protobuf::uint32 IMUInit::report_frequency() const {
  // @@protoc_insertion_point(field_get:IMUInit.report_frequency)
  return report_frequency_;
}
 void IMUInit::set_report_frequency(::google::protobuf::uint32 value) {
  
  report_frequency_ = value;
  // @@protoc_insertion_point(field_set:IMUInit.report_frequency)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BusRequest::kBusIdFieldNumber;
const int BusRequest::kTxLenFieldNumber;
const int BusRequest::kRxLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BusRequest::BusRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BusRequest)
}

void BusRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BusRequest::BusRequest(const BusRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BusRequest)
}

void BusRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  bus_id_ = 0u;
  tx_len_ = 0u;
  rx_len_ = 0u;
}

BusRequest::~BusRequest() {
  // @@protoc_insertion_point(destructor:BusRequest)
  SharedDtor();
}

void BusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BusRequest_descriptor_;
}

const BusRequest& BusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BotRequest_2eproto();
  return *default_instance_;
}

BusRequest* BusRequest::default_instance_ = NULL;

BusRequest* BusRequest::New(::google::protobuf::Arena* arena) const {
  BusRequest* n = new BusRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:BusRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BusRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BusRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(bus_id_, rx_len_);

#undef ZR_HELPER_
#undef ZR_

}

bool BusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BusRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bus_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bus_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tx_len;
        break;
      }

      // optional uint32 tx_len = 2;
      case 2: {
        if (tag == 16) {
         parse_tx_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_len_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rx_len;
        break;
      }

      // optional uint32 rx_len = 3;
      case 3: {
        if (tag == 24) {
         parse_rx_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rx_len_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BusRequest)
  return false;
#undef DO_
}

void BusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BusRequest)
  // optional uint32 bus_id = 1;
  if (this->bus_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bus_id(), output);
  }

  // optional uint32 tx_len = 2;
  if (this->tx_len() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tx_len(), output);
  }

  // optional uint32 rx_len = 3;
  if (this->rx_len() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rx_len(), output);
  }

  // @@protoc_insertion_point(serialize_end:BusRequest)
}

::google::protobuf::uint8* BusRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BusRequest)
  // optional uint32 bus_id = 1;
  if (this->bus_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bus_id(), target);
  }

  // optional uint32 tx_len = 2;
  if (this->tx_len() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tx_len(), target);
  }

  // optional uint32 rx_len = 3;
  if (this->rx_len() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rx_len(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BusRequest)
  return target;
}

int BusRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BusRequest)
  int total_size = 0;

  // optional uint32 bus_id = 1;
  if (this->bus_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bus_id());
  }

  // optional uint32 tx_len = 2;
  if (this->tx_len() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tx_len());
  }

  // optional uint32 rx_len = 3;
  if (this->rx_len() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rx_len());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BusRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BusRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BusRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BusRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BusRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BusRequest)
    MergeFrom(*source);
  }
}

void BusRequest::MergeFrom(const BusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BusRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.bus_id() != 0) {
    set_bus_id(from.bus_id());
  }
  if (from.tx_len() != 0) {
    set_tx_len(from.tx_len());
  }
  if (from.rx_len() != 0) {
    set_rx_len(from.rx_len());
  }
}

void BusRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BusRequest::CopyFrom(const BusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusRequest::IsInitialized() const {

  return true;
}

void BusRequest::Swap(BusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BusRequest::InternalSwap(BusRequest* other) {
  std::swap(bus_id_, other->bus_id_);
  std::swap(tx_len_, other->tx_len_);
  std::swap(rx_len_, other->rx_len_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BusRequest_descriptor_;
  metadata.reflection = BusRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BusRequest

// optional uint32 bus_id = 1;
void BusRequest::clear_bus_id() {
  bus_id_ = 0u;
}
 ::google::protobuf::uint32 BusRequest::bus_id() const {
  // @@protoc_insertion_point(field_get:BusRequest.bus_id)
  return bus_id_;
}
 void BusRequest::set_bus_id(::google::protobuf::uint32 value) {
  
  bus_id_ = value;
  // @@protoc_insertion_point(field_set:BusRequest.bus_id)
}

// optional uint32 tx_len = 2;
void BusRequest::clear_tx_len() {
  tx_len_ = 0u;
}
 ::google::protobuf::uint32 BusRequest::tx_len() const {
  // @@protoc_insertion_point(field_get:BusRequest.tx_len)
  return tx_len_;
}
 void BusRequest::set_tx_len(::google::protobuf::uint32 value) {
  
  tx_len_ = value;
  // @@protoc_insertion_point(field_set:BusRequest.tx_len)
}

// optional uint32 rx_len = 3;
void BusRequest::clear_rx_len() {
  rx_len_ = 0u;
}
 ::google::protobuf::uint32 BusRequest::rx_len() const {
  // @@protoc_insertion_point(field_get:BusRequest.rx_len)
  return rx_len_;
}
 void BusRequest::set_rx_len(::google::protobuf::uint32 value) {
  
  rx_len_ = value;
  // @@protoc_insertion_point(field_set:BusRequest.rx_len)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* BusBaudrate_Parity_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BusBaudrate_Parity_descriptor_;
}
bool BusBaudrate_Parity_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BusBaudrate_Parity BusBaudrate::PAR_8E1;
const BusBaudrate_Parity BusBaudrate::PAR_8N2;
const BusBaudrate_Parity BusBaudrate::PAR_8N1;
const BusBaudrate_Parity BusBaudrate::Parity_MIN;
const BusBaudrate_Parity BusBaudrate::Parity_MAX;
const int BusBaudrate::Parity_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BusBaudrate::kBusIdFieldNumber;
const int BusBaudrate::kBaudrateFieldNumber;
const int BusBaudrate::kParityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BusBaudrate::BusBaudrate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BusBaudrate)
}

void BusBaudrate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BusBaudrate::BusBaudrate(const BusBaudrate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BusBaudrate)
}

void BusBaudrate::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  bus_id_ = 0u;
  baudrate_ = 0u;
  parity_ = 0;
}

BusBaudrate::~BusBaudrate() {
  // @@protoc_insertion_point(destructor:BusBaudrate)
  SharedDtor();
}

void BusBaudrate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BusBaudrate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BusBaudrate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BusBaudrate_descriptor_;
}

const BusBaudrate& BusBaudrate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BotRequest_2eproto();
  return *default_instance_;
}

BusBaudrate* BusBaudrate::default_instance_ = NULL;

BusBaudrate* BusBaudrate::New(::google::protobuf::Arena* arena) const {
  BusBaudrate* n = new BusBaudrate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BusBaudrate::Clear() {
// @@protoc_insertion_point(message_clear_start:BusBaudrate)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BusBaudrate, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BusBaudrate*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(bus_id_, parity_);

#undef ZR_HELPER_
#undef ZR_

}

bool BusBaudrate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BusBaudrate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bus_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bus_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_baudrate;
        break;
      }

      // optional uint32 baudrate = 2;
      case 2: {
        if (tag == 16) {
         parse_baudrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baudrate_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_parity;
        break;
      }

      // optional .BusBaudrate.Parity parity = 3;
      case 3: {
        if (tag == 24) {
         parse_parity:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_parity(static_cast< ::BusBaudrate_Parity >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BusBaudrate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BusBaudrate)
  return false;
#undef DO_
}

void BusBaudrate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BusBaudrate)
  // optional uint32 bus_id = 1;
  if (this->bus_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bus_id(), output);
  }

  // optional uint32 baudrate = 2;
  if (this->baudrate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->baudrate(), output);
  }

  // optional .BusBaudrate.Parity parity = 3;
  if (this->parity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->parity(), output);
  }

  // @@protoc_insertion_point(serialize_end:BusBaudrate)
}

::google::protobuf::uint8* BusBaudrate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BusBaudrate)
  // optional uint32 bus_id = 1;
  if (this->bus_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bus_id(), target);
  }

  // optional uint32 baudrate = 2;
  if (this->baudrate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->baudrate(), target);
  }

  // optional .BusBaudrate.Parity parity = 3;
  if (this->parity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->parity(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BusBaudrate)
  return target;
}

int BusBaudrate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BusBaudrate)
  int total_size = 0;

  // optional uint32 bus_id = 1;
  if (this->bus_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bus_id());
  }

  // optional uint32 baudrate = 2;
  if (this->baudrate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->baudrate());
  }

  // optional .BusBaudrate.Parity parity = 3;
  if (this->parity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->parity());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BusBaudrate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BusBaudrate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BusBaudrate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BusBaudrate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BusBaudrate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BusBaudrate)
    MergeFrom(*source);
  }
}

void BusBaudrate::MergeFrom(const BusBaudrate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BusBaudrate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.bus_id() != 0) {
    set_bus_id(from.bus_id());
  }
  if (from.baudrate() != 0) {
    set_baudrate(from.baudrate());
  }
  if (from.parity() != 0) {
    set_parity(from.parity());
  }
}

void BusBaudrate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BusBaudrate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BusBaudrate::CopyFrom(const BusBaudrate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BusBaudrate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusBaudrate::IsInitialized() const {

  return true;
}

void BusBaudrate::Swap(BusBaudrate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BusBaudrate::InternalSwap(BusBaudrate* other) {
  std::swap(bus_id_, other->bus_id_);
  std::swap(baudrate_, other->baudrate_);
  std::swap(parity_, other->parity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BusBaudrate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BusBaudrate_descriptor_;
  metadata.reflection = BusBaudrate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BusBaudrate

// optional uint32 bus_id = 1;
void BusBaudrate::clear_bus_id() {
  bus_id_ = 0u;
}
 ::google::protobuf::uint32 BusBaudrate::bus_id() const {
  // @@protoc_insertion_point(field_get:BusBaudrate.bus_id)
  return bus_id_;
}
 void BusBaudrate::set_bus_id(::google::protobuf::uint32 value) {
  
  bus_id_ = value;
  // @@protoc_insertion_point(field_set:BusBaudrate.bus_id)
}

// optional uint32 baudrate = 2;
void BusBaudrate::clear_baudrate() {
  baudrate_ = 0u;
}
 ::google::protobuf::uint32 BusBaudrate::baudrate() const {
  // @@protoc_insertion_point(field_get:BusBaudrate.baudrate)
  return baudrate_;
}
 void BusBaudrate::set_baudrate(::google::protobuf::uint32 value) {
  
  baudrate_ = value;
  // @@protoc_insertion_point(field_set:BusBaudrate.baudrate)
}

// optional .BusBaudrate.Parity parity = 3;
void BusBaudrate::clear_parity() {
  parity_ = 0;
}
 ::BusBaudrate_Parity BusBaudrate::parity() const {
  // @@protoc_insertion_point(field_get:BusBaudrate.parity)
  return static_cast< ::BusBaudrate_Parity >(parity_);
}
 void BusBaudrate::set_parity(::BusBaudrate_Parity value) {
  
  parity_ = value;
  // @@protoc_insertion_point(field_set:BusBaudrate.parity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OLEDWrite::kPageStartFieldNumber;
const int OLEDWrite::kPageEndFieldNumber;
const int OLEDWrite::kColStartFieldNumber;
const int OLEDWrite::kColEndFieldNumber;
const int OLEDWrite::kDataLenFieldNumber;
const int OLEDWrite::kIsStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OLEDWrite::OLEDWrite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OLEDWrite)
}

void OLEDWrite::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

OLEDWrite::OLEDWrite(const OLEDWrite& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OLEDWrite)
}

void OLEDWrite::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  page_start_ = 0u;
  page_end_ = 0u;
  col_start_ = 0u;
  col_end_ = 0u;
  data_len_ = 0u;
  is_string_ = false;
}

OLEDWrite::~OLEDWrite() {
  // @@protoc_insertion_point(destructor:OLEDWrite)
  SharedDtor();
}

void OLEDWrite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OLEDWrite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OLEDWrite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OLEDWrite_descriptor_;
}

const OLEDWrite& OLEDWrite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BotRequest_2eproto();
  return *default_instance_;
}

OLEDWrite* OLEDWrite::default_instance_ = NULL;

OLEDWrite* OLEDWrite::New(::google::protobuf::Arena* arena) const {
  OLEDWrite* n = new OLEDWrite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OLEDWrite::Clear() {
// @@protoc_insertion_point(message_clear_start:OLEDWrite)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(OLEDWrite, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OLEDWrite*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(page_start_, is_string_);

#undef ZR_HELPER_
#undef ZR_

}

bool OLEDWrite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OLEDWrite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 page_start = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_start_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_page_end;
        break;
      }

      // optional uint32 page_end = 2;
      case 2: {
        if (tag == 16) {
         parse_page_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_end_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_col_start;
        break;
      }

      // optional uint32 col_start = 3;
      case 3: {
        if (tag == 24) {
         parse_col_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &col_start_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_col_end;
        break;
      }

      // optional uint32 col_end = 4;
      case 4: {
        if (tag == 32) {
         parse_col_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &col_end_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_data_len;
        break;
      }

      // optional uint32 data_len = 5;
      case 5: {
        if (tag == 40) {
         parse_data_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_len_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_string;
        break;
      }

      // optional bool is_string = 6;
      case 6: {
        if (tag == 48) {
         parse_is_string:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_string_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OLEDWrite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OLEDWrite)
  return false;
#undef DO_
}

void OLEDWrite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OLEDWrite)
  // optional uint32 page_start = 1;
  if (this->page_start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->page_start(), output);
  }

  // optional uint32 page_end = 2;
  if (this->page_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->page_end(), output);
  }

  // optional uint32 col_start = 3;
  if (this->col_start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->col_start(), output);
  }

  // optional uint32 col_end = 4;
  if (this->col_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->col_end(), output);
  }

  // optional uint32 data_len = 5;
  if (this->data_len() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->data_len(), output);
  }

  // optional bool is_string = 6;
  if (this->is_string() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_string(), output);
  }

  // @@protoc_insertion_point(serialize_end:OLEDWrite)
}

::google::protobuf::uint8* OLEDWrite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OLEDWrite)
  // optional uint32 page_start = 1;
  if (this->page_start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->page_start(), target);
  }

  // optional uint32 page_end = 2;
  if (this->page_end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->page_end(), target);
  }

  // optional uint32 col_start = 3;
  if (this->col_start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->col_start(), target);
  }

  // optional uint32 col_end = 4;
  if (this->col_end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->col_end(), target);
  }

  // optional uint32 data_len = 5;
  if (this->data_len() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->data_len(), target);
  }

  // optional bool is_string = 6;
  if (this->is_string() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_string(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:OLEDWrite)
  return target;
}

int OLEDWrite::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:OLEDWrite)
  int total_size = 0;

  // optional uint32 page_start = 1;
  if (this->page_start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->page_start());
  }

  // optional uint32 page_end = 2;
  if (this->page_end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->page_end());
  }

  // optional uint32 col_start = 3;
  if (this->col_start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->col_start());
  }

  // optional uint32 col_end = 4;
  if (this->col_end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->col_end());
  }

  // optional uint32 data_len = 5;
  if (this->data_len() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->data_len());
  }

  // optional bool is_string = 6;
  if (this->is_string() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OLEDWrite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OLEDWrite)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OLEDWrite* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OLEDWrite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OLEDWrite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OLEDWrite)
    MergeFrom(*source);
  }
}

void OLEDWrite::MergeFrom(const OLEDWrite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OLEDWrite)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.page_start() != 0) {
    set_page_start(from.page_start());
  }
  if (from.page_end() != 0) {
    set_page_end(from.page_end());
  }
  if (from.col_start() != 0) {
    set_col_start(from.col_start());
  }
  if (from.col_end() != 0) {
    set_col_end(from.col_end());
  }
  if (from.data_len() != 0) {
    set_data_len(from.data_len());
  }
  if (from.is_string() != 0) {
    set_is_string(from.is_string());
  }
}

void OLEDWrite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OLEDWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OLEDWrite::CopyFrom(const OLEDWrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OLEDWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OLEDWrite::IsInitialized() const {

  return true;
}

void OLEDWrite::Swap(OLEDWrite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OLEDWrite::InternalSwap(OLEDWrite* other) {
  std::swap(page_start_, other->page_start_);
  std::swap(page_end_, other->page_end_);
  std::swap(col_start_, other->col_start_);
  std::swap(col_end_, other->col_end_);
  std::swap(data_len_, other->data_len_);
  std::swap(is_string_, other->is_string_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OLEDWrite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OLEDWrite_descriptor_;
  metadata.reflection = OLEDWrite_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OLEDWrite

// optional uint32 page_start = 1;
void OLEDWrite::clear_page_start() {
  page_start_ = 0u;
}
 ::google::protobuf::uint32 OLEDWrite::page_start() const {
  // @@protoc_insertion_point(field_get:OLEDWrite.page_start)
  return page_start_;
}
 void OLEDWrite::set_page_start(::google::protobuf::uint32 value) {
  
  page_start_ = value;
  // @@protoc_insertion_point(field_set:OLEDWrite.page_start)
}

// optional uint32 page_end = 2;
void OLEDWrite::clear_page_end() {
  page_end_ = 0u;
}
 ::google::protobuf::uint32 OLEDWrite::page_end() const {
  // @@protoc_insertion_point(field_get:OLEDWrite.page_end)
  return page_end_;
}
 void OLEDWrite::set_page_end(::google::protobuf::uint32 value) {
  
  page_end_ = value;
  // @@protoc_insertion_point(field_set:OLEDWrite.page_end)
}

// optional uint32 col_start = 3;
void OLEDWrite::clear_col_start() {
  col_start_ = 0u;
}
 ::google::protobuf::uint32 OLEDWrite::col_start() const {
  // @@protoc_insertion_point(field_get:OLEDWrite.col_start)
  return col_start_;
}
 void OLEDWrite::set_col_start(::google::protobuf::uint32 value) {
  
  col_start_ = value;
  // @@protoc_insertion_point(field_set:OLEDWrite.col_start)
}

// optional uint32 col_end = 4;
void OLEDWrite::clear_col_end() {
  col_end_ = 0u;
}
 ::google::protobuf::uint32 OLEDWrite::col_end() const {
  // @@protoc_insertion_point(field_get:OLEDWrite.col_end)
  return col_end_;
}
 void OLEDWrite::set_col_end(::google::protobuf::uint32 value) {
  
  col_end_ = value;
  // @@protoc_insertion_point(field_set:OLEDWrite.col_end)
}

// optional uint32 data_len = 5;
void OLEDWrite::clear_data_len() {
  data_len_ = 0u;
}
 ::google::protobuf::uint32 OLEDWrite::data_len() const {
  // @@protoc_insertion_point(field_get:OLEDWrite.data_len)
  return data_len_;
}
 void OLEDWrite::set_data_len(::google::protobuf::uint32 value) {
  
  data_len_ = value;
  // @@protoc_insertion_point(field_set:OLEDWrite.data_len)
}

// optional bool is_string = 6;
void OLEDWrite::clear_is_string() {
  is_string_ = false;
}
 bool OLEDWrite::is_string() const {
  // @@protoc_insertion_point(field_get:OLEDWrite.is_string)
  return is_string_;
}
 void OLEDWrite::set_is_string(bool value) {
  
  is_string_ = value;
  // @@protoc_insertion_point(field_set:OLEDWrite.is_string)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
